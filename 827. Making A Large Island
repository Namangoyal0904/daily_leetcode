class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        unordered_map<int, int> islandSize;  // Stores island ID -> Size mapping
        int islandID = 2;  // Unique IDs start from 2
        int maxIsland = 0;

        // Directions for 4-way movement
        vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        // DFS to compute island size and mark unique IDs
        function<int(int, int, int)> dfs = [&](int r, int c, int id) {
            if (r < 0 || c < 0 || r >= n || c >= n || grid[r][c] != 1) 
                return 0;

            grid[r][c] = id; // Mark the cell with the unique island ID
            int size = 1;

            for (auto [dr, dc] : directions) {
                size += dfs(r + dr, c + dc, id);
            }

            return size;
        };

        // Step 1: Label each island and store its size
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int size = dfs(i, j, islandID);
                    islandSize[islandID] = size;
                    maxIsland = max(maxIsland, size);
                    islandID++;
                }
            }
        }

        // Step 2: Try converting a `0` to `1` and calculate the possible max island
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    unordered_set<int> seenIslands;

                    int potentialSize = 1;  // Convert 0 â†’ 1, start with size 1

                    for (auto [dr, dc] : directions) {
                        int nr = i + dr, nc = j + dc;
                        if (nr >= 0 && nc >= 0 && nr < n && nc < n && grid[nr][nc] > 1) {
                            int id = grid[nr][nc];
                            if (seenIslands.find(id) == seenIslands.end()) {
                                potentialSize += islandSize[id];
                                seenIslands.insert(id);
                            }
                        }
                    }

                    maxIsland = max(maxIsland, potentialSize);
                }
            }
        }

        return maxIsland;
    }
};
