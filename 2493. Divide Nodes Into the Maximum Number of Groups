class Solution {
public:
    int magnificentSets(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n + 1);
        vector<int> color(n + 1, 0); // 0: unvisited, 1: color1, -1: color2
        vector<bool> visited(n + 1, false);

        // Build adjacency list
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        // Helper function to check if a component is bipartite
        auto isBipartite = [&](int start) -> bool {
            queue<int> q;
            q.push(start);
            color[start] = 1;

            while (!q.empty()) {
                int node = q.front();
                q.pop();

                for (int neighbor : adj[node]) {
                    if (color[neighbor] == 0) {
                        color[neighbor] = -color[node];
                        q.push(neighbor);
                    } else if (color[neighbor] == color[node]) {
                        return false; // Not bipartite
                    }
                }
            }
            return true;
        };

        // Helper function to find maximum layers in a component
        auto maxBFSDepth = [&](int start) -> int {
            queue<int> q;
            vector<int> dist(n + 1, -1);
            q.push(start);
            dist[start] = 0;
            int maxDepth = 0;

            while (!q.empty()) {
                int node = q.front();
                q.pop();
                maxDepth = max(maxDepth, dist[node]);

                for (int neighbor : adj[node]) {
                    if (dist[neighbor] == -1) {
                        dist[neighbor] = dist[node] + 1;
                        q.push(neighbor);
                    }
                }
            }
            return maxDepth + 1;
        };

        int result = 0;

        // Process each connected component
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                queue<int> comp;
                comp.push(i);
                visited[i] = true;
                vector<int> nodes;
                
                // Find all nodes in this connected component
                while (!comp.empty()) {
                    int node = comp.front();
                    comp.pop();
                    nodes.push_back(node);

                    for (int neighbor : adj[node]) {
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            comp.push(neighbor);
                        }
                    }
                }

                // Check if the component is bipartite
                if (!isBipartite(nodes[0])) {
                    return -1; // Impossible to group
                }

                // Find max depth by trying BFS from each node in the component
                int maxDepth = 0;
                for (int node : nodes) {
                    maxDepth = max(maxDepth, maxBFSDepth(node));
                }

                result += maxDepth;
            }
        }

        return result;
    }
};
